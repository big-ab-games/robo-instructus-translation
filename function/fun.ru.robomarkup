// Pseudo markup format see ./README.md

#!unlock type{short} id{s-left}
`robo_left() ` оставаясь на той же ячейке, повернуться налево


#!unlock type{short} id{s-forward}
`robo_forward() ` двигаться вперед (отклоняясь вправо, потому что ячейки треугольные)


#!unlock type{short} id{s-scan}
`robo_scan() ` сканировать ячейку перед роботом, возвращает `-999`: неизвестно, `-1`: пустота, `1`: обычная, `2`: выход


#!unlock type{short} id{s-scan-u1}
`robo_scan() ` сканировать ячейку перед роботом, возвращает `-999`: неизвестно, `-1`: пустота, `1`: обычная, `2`: выход, `10`: переключатель


#!unlock type{short} id{s-scan-u2}
`robo_scan() ` сканировать ячейку перед роботом, возвращает `-999`: неизвестно, `-1`: пустота, `1`: обычная, `2`: выход, `10`: переключатель, `11`: хранилище данных о местоположении


#!unlock type{short} id{s-scan-u3}
`robo_scan() ` сканировать ячейку перед роботом, возвращает `-999`: неизвестно, `-1`: пустота, `1`: обычная, `2`: выход, `10`: переключатель, `11`: хранилище данных о местоположении, `12`: хранилище данных о направлении


#!unlock type{short} id{s-scan-u4}
`robo_scan() ` сканировать ячейку перед роботом, возвращает `-999`: неизвестно, `-1`: пустота, `1`: обычная, `2`: выход, `3`: пусковая установка, `10`: переключатель, `11`: хранилище данных о местоположении, `12`: хранилище данных о направлении


#!unlock type{short} id{s-use}
`robo_use() ` взаимодействовать с текущей ячейкой, возвращает: переключатель `1`: включено, `0`: выключено


#!unlock type{short} id{s-use-u2}
`robo_use() ` взаимодействовать с текущей ячейкой, возвращает: переключатель `1`: включено, `0`: выключено, хранилище данных о местоположении: id безопасной ячейки


#!unlock type{short} id{s-use-u3}
`robo_use() ` взаимодействовать с текущей ячейкой, возвращает: переключатель `1`: включено, `0`: выключено, хранилище данных о местоположении: id безопасной ячейки, направления `1`: вверх, `2`: вправо


#!unlock type{short} id{s-use-u4}
`robo_use() ` взаимодействовать с текущей ячейкой, возвращает: переключатель `1`: включено, `0`: выключено, хранилище данных о местоположении: id безопасной ячейки, направления `1`: вверх, `2`: вправо, `3`: вниз, `4`: влево


#!unlock type{short} id{s-detect-adjacent}
`robo_detect_adjacent() ` возвращает число безопасных прилегающих к текущей ячеек, также считая неизвестные


#!unlock type{short} id{s-location}
`robo_location() ` возвращает id текущей ячейки


#!unlock type{short} id{s-forward-location}
`robo_forward_location() ` возвращает id ячейки, расположенной перед роботом


#!unlock type{short} id{s-detect-3}
`robo_detect_3() ` возвращает число безопасных ячеек из трех по правую руку, также считая неизвестные


#!unlock type{short} id{s-detect-3l}
`robo_detect_3l() ` возвращает число безопасных ячеек из трех по левую руку, также считая неизвестные


#!unlock type{short} id{s-probo-left}
`probo_left() ` оставаясь на той же ячейке, повернуться налево


#!unlock type{short} id{s-probo-forward}
`probo_forward() ` двигаться вперед (отклоняясь вправо, потому что ячейки треугольные)


#!unlock type{short} id{s-probo-scan}
`probo_scan() ` сканирует текущую ячейку, возвращает `-999`: неизвестно, `-1`: пустота, `1`: обычная, `2`: выход, `3`: пусковая установка, `10`: переключатель, `11`: хранилище данных о местоположении, `12`:  хранилище данных о направлении


#!unlock type{short} id{s-probo-location}
`probo_location() ` возвращает id текущей ячейки


#!unlock type{short} id{s-probo-use}
`probo_use() ` взаимодействовать с текущей ячейкой, возвращает: переключатель `1`: включено, `0`: выключено, хранилище данных о местоположении: id безопасной ячейки, направления `1`: вверх, `2`: вправо, `3`: вниз, `4`: влево


#!unlock type{short} id{s-transmit}
`transmit(subject,data) ` передать данные на тему


#!unlock type{short} id{s-receive}
`receive(subject) ` получать и возвратить самые старые данные или `-20000`, если ничего нет


#!unlock type{functions} id{left-forward}
`robo_left()` Каждый вызов приказывает роботу переместиться к следующей стороне текущей ячейки, против часовой стрелки. Выполняется $tu{robo_left()} Мимас-секунд (мс).
$render{robo_left}
`robo_forward()` Приказывает роботу передвинуться на ячейку перед собой. При этом робот повернется вправо. Выполняется $tu{robo_forward()} мс.
$render{robo_forward}


#!unlock type{function} id{scan}
`robo_scan()` Сканирует ячейку перед роботом, возвращая значение в зависимости от ее свойств. `1` обозначает обычную ячейку, `2`: выход, `-1`: ячейки точно нет, `-999`: неизвестно.  Выполняется $tu{robo_scan()} мс.

$render{robo_scan}


#!unlock type{function-update} id{scan-u1}
`robo_scan()` Сканирует ячейку перед роботом, возвращая значение в зависимости от ее свойств. `1` обозначает обычную ячейку, `2`: выход, `-1`: ячейки точно нет, `-999`: неизвестно, `10`: переключатель. Выполняется $tu{robo_scan()} мс.

$render{robo_scan}


#!unlock type{function-update} id{scan-u2}
`robo_scan()` Сканирует ячейку перед роботом, возвращая значение в зависимости от ее свойств. `1` обозначает обычную ячейку, `2`: выход, `-1`: ячейки точно нет, `-999`: неизвестно, `10`: переключатель, `11`: хранилище данных о местоположении. Выполняется $tu{robo_scan()} мс.

$render{robo_scan}


#!unlock type{function-update} id{scan-u3}
`robo_scan()` Сканирует ячейку перед роботом, возвращая значение в зависимости от ее свойств. `1` обозначает обычную ячейку, `2`: выход, `-1`: ячейки точно нет, `-999`: неизвестно, `10`: переключатель, `11`: хранилище данных о местоположении, `12`: хранилище данных о направлении. Выполняется $tu{robo_scan()} мс.

$render{robo_scan}


#!unlock type{function-update} id{scan-u4}
`robo_scan()` Сканирует ячейку перед роботом, возвращая значение в зависимости от ее свойств. `1` обозначает обычную ячейку, `2`: выход, `-1`: ячейки точно нет, `-999`: неизвестно, `3`: ячейка с пусковой установкой, `10`: переключатель, `11`: хранилище данных о местоположении, `12`: хранилище данных о направлении. Выполняется $tu{robo_scan()} мс.

$render{robo_scan}


#!unlock type{function} id{use}
`robo_use()` Взаимодействует с текущей ячейкой и возвращает свойственные ее типу данные или `0`. Выполняется $tu{robo_use()} мс.
$render{robo_use}


#!unlock type{function-update} id{use-u1}
`robo_use()` Взаимодействует с текущей ячейкой и возвращает свойственные ее типу данные или `0`. Выполняется $tu{robo_use()} мс
- Переключатель: возвращает `1`: включено, `0`: выключено. Выполняется дополнительно +$tu{robo_use_power} мс
$render{robo_use}


#!unlock type{function-update} id{use-u2}
`robo_use()` Взаимодействует с текущей ячейкой и возвращает свойственные ее типу данные или `0`. Выполняется $tu{robo_use()} мс
- Переключатель: возвращает `1`: включено, `0`: выключено. Выполняется дополнительно +$tu{robo_use_power} мс
- Хранилище данных о местоположении: возвращает id безопасной ячейки. Выполняется дополнительно +$tu{robo_use_location} мс
$render{robo_use-2}


#!unlock type{function-update} id{use-u3}
`robo_use()` Взаимодействует с текущей ячейкой и возвращает свойственные ее типу данные или `0`. Выполняется $tu{robo_use()} мс
- Переключатель: возвращает `1`: включено, `0`: выключено. Выполняется дополнительно +$tu{robo_use_power} мс
- Хранилище данных о местоположении: возвращает id безопасной ячейки. Выполняется дополнительно +$tu{robo_use_location} мс
- Хранилище данных о направлении: возвращает `1`: вверх, `2`: вправо. Выполняется дополнительно +$tu{robo_use_direction} мс
$render{robo_use-3}


#!unlock type{function-update} id{use-u4}
`robo_use()` Взаимодействует с текущей ячейкой и возвращает свойственные ее типу данные или `0`. Выполняется $tu{robo_use()} мс
- Переключатель: возвращает `1`: включено, `0`: выключено. Выполняется дополнительно +$tu{robo_use_power} мс
- Хранилище данных о местоположении: возвращает id безопасной ячейки. Выполняется дополнительно +$tu{robo_use_location} мс
- Хранилище данных о направлении: возвращает `1`: вверх, `2`: вправо, `3`: вниз, `4`: влево. Выполняется дополнительно +$tu{robo_use_direction} мс
$render{robo_use-3}


#!unlock type{function} id{forward-location}
`robo_forward_location()` Возвращает id ячейки, расположенной перед роботом. Выполняется $tu{robo_forward_location()} мс.

$render{robo_forward_location}
```no_run
var location = robo_forward_location()  # 8823
```
Каждая ячейка на уровне имеет определенный id (положительный и не равный нулю).


#!unlock type{function} id{location}
`robo_location()` Возвращает id ячейки, на которой находится робот. Выполняется $tu{robo_location()} мс.
$render{robo_location}


#!unlock type{function} id{detect-adjacent}
`robo_detect_adjacent()` Возвращает число безопасных ячеек, прилегающих к текущей позиции. `0`, `1`, `2` или `3`. Работает корректно даже если некоторые ячейки неизвестны вызову `robo_scan()`.  Выполняется $tu{robo_detect_adjacent()} мс.
$render{robo_detect_adjacent}
```no_run
var its_safe = robo_detect_adjacent() is 3
```


#!unlock type{function} id{detect-3}
`robo_detect_3()` Возвращает число безопасных ячеек из трех в линию по правую руку. Работает корректно даже если некоторые ячейки неизвестны вызову `robo_scan()`. Выполняется $tu{robo_detect_3()} мс.

$render{robo_detect_3}


#!unlock type{function} id{detect-3l}
`robo_detect_3l()` Возвращает число безопасных ячеек из трех в линию по левую руку. Схоже с `robo_detect_3()`. Выполняется $tu{robo_detect_3l()} мс.

$render{robo_detect_3l}


#!unlock type{functions} id{probo}
`probo_left()` Поворачивает зонд налево, до следующей стороны текущей ячейки. Выполняется $tu{probo_left()} мс.

`probo_forward()` Двигает зонд вперед, на место над ячейкой, в сторону которой он направлен. По исполнении зонд будет ориентирован вправо. Выполняется $tu{probo_forward()} мс.

`probo_location()` Возвращает id текущей ячейки. Выполняется $tu{probo_location()} мс.

`probo_scan()` Сканирует текущую ячейку, возвращая значение в зависимости от ее свойств. `1` обозначает обычную ячейку, `2`: выход, `-1`: ячейки точно нет, `-999`: неизвестно, `3`: пусковая установка, `10`: переключатель, `11`: хранилище данных о местоположении, `12`: хранилище данных о направлении. Выполняется $tu{probo_scan()} мс.

$render{probo_scan}


#!unlock type{function-update} id{probo-scan-u1}
`probo_scan()` Сканирует текущую ячейку, возвращая значение в зависимости от ее свойств. `1` обозначает обычную ячейку, `2`: выход, `-1`: ячейки точно нет, `-999`: неизвестно, `3`: пусковая установка, направленная вверх, `4`: пусковая установка, направленная вниз-вправо, `5`: пусковая установка, направленная вниз-влево, `10`: переключатель, `11`: хранилище данных о местоположении, `12`: хранилище данных о направлении. Выполняется $tu{probo_scan()} мс.

$render{probo_scan-2}


#!unlock type{functions} id{transmit}
`transmit(subject,data)` Отправить блок данных `data`, связанный с темой `subject`. Такие послания могут быть получены другими роботами. Выполняется $tu{transmit(vv)} мс.

`receive(subject)` Получить один блок данных, отправленных другим роботом и связанных с темой `subject`. Блоки данных получаются по очереди. Если нет передачи на соответствующую тему, то возвращается значение `-20000`. Выполняется $tu{receive(v)} мс.


#!unlock type{function} id{probo-use}
`probo_use()` Взаимодействует с текущей ячейкой и возвращает свойственные ее типу данные или `0`. Выполняется $tu{probo_use()} мс
- Переключатель: возвращает `1`: включено, `0`: выключено. Выполняется дополнительно +$tu{robo_use_power} мс
- Хранилище данных о местоположении: возвращает id безопасной ячейки. Выполняется дополнительно +$tu{robo_use_location} мс
- Хранилище данных о направлении: возвращает `1`: вверх, `2`: вправо, `3`: вниз, `4`: влево. Выполняется дополнительно +$tu{robo_use_direction} мс
$render{probo_use}
