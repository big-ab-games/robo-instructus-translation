// Pseudo markup format see ./README.md

#!unlock type{short} id{s-left}
`robo_left() ` bleib auf Kachel, drehe nach links


#!unlock type{short} id{s-forward}
`robo_forward() ` vorwärts bewegen (dreht auch nach rechts wegen Dreiecken)


#!unlock type{short} id{s-scan}
`robo_scan() ` prüfe Kachel voraus, ergibt `-999`: unbekannt, `-1`: abwesend, `1`: normal, `2`: Ausgang


#!unlock type{short} id{s-scan-u1}
`robo_scan() ` prüfe Kachel voraus, ergibt `-999`: unbekannt, `-1`: abwesend, `1`: normal, `2`: Ausgang, `10`: Netzschalter


#!unlock type{short} id{s-scan-u2}
`robo_scan() ` prüfe Kachel voraus, ergibt `-999`: unbekannt, `-1`: abwesend, `1`: normal, `2`: Ausgang, `10`: Netzschalter, `11`: Standort-Speicher


#!unlock type{short} id{s-scan-u3}
`robo_scan() ` prüfe Kachel voraus, ergibt `-999`: unbekannt, `-1`: abwesend, `1`: normal, `2`: Ausgang, `10`: Netzschalter, `11`: Standort-Speicher, `12`: Richtungs-Speicher


#!unlock type{short} id{s-scan-u4}
`robo_scan() ` prüfe Kachel voraus, ergibt `-999`: unbekannt, `-1`: abwesend, `1`: normal, `2`: Ausgang, `3`: Wurframpe, `10`: Netzschalter, `11`: Standort-Speicher, `12`: Richtungs-Speicher


#!unlock type{short} id{s-use}
`robo_use() ` benutze aktuelle Kachel, ergibt: Netzschalter `1`: an, `0`: aus


#!unlock type{short} id{s-use-u2}
`robo_use() ` benutze aktuelle Kachel, ergibt: Netzschalter `1`: an, `0`: aus, Standort-Speicher: sichere Standort ID


#!unlock type{short} id{s-use-u3}
`robo_use() ` benutze aktuelle Kachel, ergibt: Netzschalter `1`: an, `0`: aus, Standort-Speicher: sichere Standort ID, Richtungs-Speicher `1`: oben, `2`: rechts


#!unlock type{short} id{s-use-u4}
`robo_use() ` benutze aktuelle Kachel, ergibt: Netzschalter `1`: an, `0`: aus, Standort-Speicher: sichere Standort-ID, Richtungs-Speicher `1`: oben, `2`: rechts, `3`: unten, `4`: links


#!unlock type{short} id{s-detect-adjacent}
`robo_detect_adjacent() ` gibt die Anzahl nicht abwesender Nachbar-Kacheln zurück, unbeinträchtigt durch unbekannte


#!unlock type{short} id{s-location}
`robo_location() ` gibt die Standort-ID der aktuellen Kachel zurück


#!unlock type{short} id{s-forward-location}
`robo_forward_location() ` gibt die Standort-ID der Kachel voraus zurück


#!unlock type{short} id{s-detect-3}
`robo_detect_3() ` gibt die Anzahl der 3 Kacheln voraus (rechtsliegend) zurück, die nicht abwesend sind, unbeinträchtigt durch unbekannte


#!unlock type{short} id{s-detect-3l}
`robo_detect_3l() ` gibt die Anzahl der 3 Kacheln voraus (linksliegend) zurück, die nicht abwesend sind, unbeinträchtigt durch unbekannte


#!unlock type{short} id{s-probo-left}
`probo_left() ` bleib auf Kachel, drehe nach links


#!unlock type{short} id{s-probo-forward}
`probo_forward() ` vorwärts bewegen (dreht auch etwas nach rechts)


#!unlock type{short} id{s-probo-scan}
`probo_scan() ` prüfe aktuelle Kachel, ergibt `-999`: unbekannt, `-1`: abwesend, `1`: normal, `2`: Ausgang, `3`: Wurframpe, `10`: Netzschalter, `11`: Standort-Speicher, `12`: Richtungs-Speicher


#!unlock type{short} id{s-probo-location}
`probo_location() ` gib aktuellen Standort zurück


#!unlock type{short} id{s-probo-use}
`probo_use() ` benutze aktuelle Kachel, ergibt: Netzschalter `1`: an, `0`: aus, Standort-Speicher: sichere Standort-ID, Richtungs-Speicher `1`: oben, `2`: rechts, `3`: unten, `4`: links


#!unlock type{short} id{s-transmit}
`transmit(subject,data) ` sende Daten zu einem Betreff


#!unlock type{short} id{s-receive}
`receive(subject) ` konsumiere & gib ältesten Datenwert zum Betreff zurück (oder `-20000`, wenn keine Werte existieren)


#!unlock type{functions} id{left-forward}
`robo_left()` Jeder Aufruf instruiert den Roboter sich gegen den Uhrzeigersinn zur nächsten Seite der aktuellen Kacheln zu bewegen. Laufzeit $tu{robo_left()} Mimas-Sekunden (ms).
$render{robo_left}
`robo_forward()` Befiehlt dem Roboter sich vorwärts auf die Kachel zu bewegen, der er gegenübersteht. Der Roboter wird dabei bevorzugt nach rechts steuern. Laufzeit $tu{robo_forward()} ms.
$render{robo_forward}


#!unlock type{function} id{scan}
`robo_scan()` Überprüft die Kachel voraus und gibt den Kachel-Typ als Zahl zurück. `1` ist eine normale Kachel, `2` ein Ausgang, `-1` bedeutet keine Kachel, `-999` bedeutet unbekannt. Laufzeit $tu{robo_scan()} ms.

$render{robo_scan}


#!unlock type{function-update} id{scan-u1}
`robo_scan()` Überprüft die Kachel voraus und gibt den Kachel-Typ als Zahl zurück. `1` ist eine normale Kachel, `2`: Ausgang, `-1`: keine Kachel, `-999`: unbekannt, `10`: Netzschalter. Laufzeit $tu{robo_scan()} ms.

$render{robo_scan}


#!unlock type{function-update} id{scan-u2}
`robo_scan()` Überprüft die Kachel voraus und gibt den Kachel-Typ als Zahl zurück. `1` ist eine normale Kachel, `2`: Ausgang, `-1`: keine Kachel, `-999`: unbekannt, `10`: Netzschalter, `11`: Standort-Speicher. Laufzeit $tu{robo_scan()} ms.

$render{robo_scan}


#!unlock type{function-update} id{scan-u3}
`robo_scan()` Überprüft die Kachel voraus und gibt den Kachel-Typ als Zahl zurück. `1` ist eine normale Kachel, `2`: Ausgang, `-1`: keine Kachel, `-999`: unbekannt, `10`: Netzschalter, `11`: Standort-Speicher, `12`: Richtungs-Speicher. Laufzeit $tu{robo_scan()} ms.

$render{robo_scan}


#!unlock type{function-update} id{scan-u4}
`robo_scan()` Überprüft die Kachel voraus und gibt den Kachel-Typ als Zahl zurück. `1` ist eine normale Kachel, `2`: Ausgang, `-1`: keine Kachel, `-999`: unbekannt, `3`: Wurframpe, `10`: Netzschalter, `11`: Standort-Speicher, `12`: Richtungs-Speicher. Laufzeit $tu{robo_scan()} ms.

$render{robo_scan}


#!unlock type{function} id{use}
`robo_use()` Bedient die aktuelle Kachel und gibt Kachel-spezifische Daten oder `0` zurück. Laufzeit $tu{robo_use()} ms
$render{robo_use}


#!unlock type{function-update} id{use-u1}
`robo_use()` Bedient die aktuelle Kachel und gibt Kachel-spezifische Daten oder `0` zurück. Laufzeit $tu{robo_use()} ms
- Netzschalter: Ergibt `1`: an, `0` aus. Zusätliche Laufzeit +$tu{robo_use_power} ms
$render{robo_use}


#!unlock type{function-update} id{use-u2}
`robo_use()` Bedient die aktuelle Kachel und gibt Kachel-spezifische Daten oder `0` zurück. Laufzeit $tu{robo_use()} ms
- Netzschalter: Ergibt `1`: an, `0` aus. Zusätliche Laufzeit +$tu{robo_use_power} ms
- Standort-Speicher: Gibt sichere Standort-ID zurück. Zusätliche Laufzeit +$tu{robo_use_location} ms
$render{robo_use-2}


#!unlock type{function-update} id{use-u3}
`robo_use()` Bedient die aktuelle Kachel und gibt Kachel-spezifische Daten oder `0` zurück. Laufzeit $tu{robo_use()} ms
- Netzschalter: Ergibt `1`: an, `0` aus. Zusätliche Laufzeit +$tu{robo_use_power} ms
- Standort-Speicher: Gibt sichere Standort-ID zurück. Zusätliche Laufzeit +$tu{robo_use_location} ms
- Richtungs-Speicher: Ergibt `1`: oben, `2`: rechts. Zusätliche Laufzeit +$tu{robo_use_direction} ms
$render{robo_use-3}


#!unlock type{function-update} id{use-u4}
`robo_use()` Bedient die aktuelle Kachel und gibt Kachel-spezifische Daten oder `0` zurück. Laufzeit $tu{robo_use()} ms
- Netzschalter: Ergibt `1`: an, `0` aus. Zusätliche Laufzeit +$tu{robo_use_power} ms
- Standort-Speicher: Gibt sichere Standort-ID zurück. Zusätliche Laufzeit +$tu{robo_use_location} ms
- Richtungs-Speicher: Ergibt `1`: oben, `2`: rechts, `3`: unten, `4`: links. Zusätliche Laufzeit +$tu{robo_use_direction} ms
$render{robo_use-3}


#!unlock type{function} id{forward-location}
`robo_forward_location()` Gibt die ID der Kachel zurück, die dem Roboter gegenüber liegt. Laufzeit $tu{robo_forward_location()} ms.

$render{robo_forward_location}
```no_run
var location = robo_forward_location()  # 8823
```
Jede Kachel in einem Level hat eine eindeutige ID-Nummer (größer `0`).


#!unlock type{function} id{location}
`robo_location()` Gibt die ID der Kachel, auf der der Roboter steht, zurück. Laufzeit $tu{robo_location()} ms.
$render{robo_location}


#!unlock type{function} id{detect-adjacent}
`robo_detect_adjacent()` Gibt die Anzahl aller Nachbar-Kacheln der aktuellen Position zurück. `0`, `1`, `2` oder `3`. Dies funktioniert auch dann korrekt, wenn manche der Kacheln laut `robo_scan()` unbekannt sind. Laufzeit $tu{robo_detect_adjacent()} ms.
$render{robo_detect_adjacent}
```no_run
var its_safe = robo_detect_adjacent() is 3
```


#!unlock type{function} id{detect-3}
`robo_detect_3()` Gibt die Anzahl aller Kacheln in einer geraden, rechtsdrehenden Linie zurück. Dies funktioniert auch dann korrekt, wenn manche der Kacheln laut `robo_scan()` unbekannt sind. Laufzeit $tu{robo_detect_3()} ms.

$render{robo_detect_3}


#!unlock type{function} id{detect-3l}
`robo_detect_3l()` Gibt die Anzahl aller Kacheln in einer geraden, linksdrehenden Linie zurück. Ähnlich zu `robo_detect_3()`. Laufzeit $tu{robo_detect_3l()} ms.

$render{robo_detect_3l}


#!unlock type{functions} id{probo}
`probo_left()` Drehung nach links zur nächsten Seite der aktuellen Kachel. Laufzeit $tu{probo_left()} ms.

`probo_forward()` Bewege die Sonde vorwärts auf die Kachel-Fläche, die ihr gegenüber liegt. Neue Ausrichtung der Sonde dreht nach rechts ab. Laufzeit $tu{probo_forward()} ms.

`probo_location()` Gibt die ID der aktuellen Kachel zurück. Laufzeit $tu{probo_location()} ms.

`probo_scan()` Prüft die aktuelle Kachel und gibt den Kachel-Typ als Zahl zurück. `1` ist eine normale Kachel, `2`: Ausgang, `-1`: keine Kachel, `-999`: unbekannt, `3`: Wurframpe, `10`: Netzschalter, `11`: Standort-Speicher, `12`: Richtungs-Speicher. Laufzeit $tu{probo_scan()} ms.

$render{probo_scan}


#!unlock type{function-update} id{probo-scan-u1}
`probo_scan()` Prüft die aktuelle Kachel und gibt den Kachel-Typ als Zahl zurück. `1` ist eine normale Kachel, `2`: Ausgang, `-1`: keine Kachel, `-999`: unbekannt, `3`: Nord-Wurframpe, `4`: Südost-Wurframpe, `5`: Südwest-Wurframpe, `10`: Netzschalter, `11`: Standort-Speicher, `12`: Richtungs-Speicher. Laufzeit $tu{probo_scan()} ms.

$render{probo_scan-2}


#!unlock type{functions} id{transmit}
`transmit(subject,data)` Versendet einen einzelnen Datenwert `data` zusammen mit dem Betreff-Wert `subject`. Derartige Übertragungen können von anderen Robotern empfangen werden. Laufzeit $tu{transmit(vv)} ms.

`receive(subject)` Empfängt einen einzelnen Datenwert, der von einem anderen Roboter mit dem passendem Betreff-Wert versendet wurde. Datenübertragungen werden geordnet empfangen. Gibt `-20000` zurück, wenn keine Übertragung zum Betreff empfangen werden kann. Laufzeit $tu{receive(v)} ms.


#!unlock type{function} id{probo-use}
`probo_use()` Bedient die aktuelle Kachel und gibt Kachel-spezifische Daten oder `0` zurück. Laufzeit $tu{probo_use()} ms
- Netzschalter: Ergibt `1`: an, `0` aus. Zusätliche Laufzeit +$tu{robo_use_power} ms
- Standort-Speicher: Gibt sichere Standort-ID zurück. Zusätliche Laufzeit +$tu{robo_use_location} ms
- Richtungs-Speicher: Ergibt `1`: oben, `2`: rechts. Zusätliche Laufzeit +$tu{robo_use_direction} ms
$render{probo_use}
