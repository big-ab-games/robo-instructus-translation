// Pseudo markup format see ./README.md

#!unlock type{primer} id{loops}
# Schleifen

`loop` wird benutzt, um Befehle in einer Endlosschleife zu wiederholen. Es werden alle Befehle wiederholt, die eingerückt nach dem Schlüsselwort `loop` folgen. Die eingerückten Befehle sind der Gültigkeitsbereich der `loop`-Schleife.

```max_run=11
robo_forward()  # wird einmal aufgerufen

loop
    robo_forward()
    robo_left()

robo_left()  # wird niemals aufgerufen
```


#!unlock type{primer} id{comments}
# Kommentare

Text nach einer Raute '`#`' sind Kommentare. Diese werden nicht wie Code ausgeführt, sondern lediglich für Notizen verwendet.

```no_run
robo_left()  # Ich glaube, ich fange an, das zu verstehen.
```


#!unlock type{primer} id{conditionals}
# Bedingungen

Mit `if` kann man Befehle ausführen oder überspringen, wenn eine Bedingung erfüllt bzw. nicht erfüllt ist.

```
if robo_scan() is 1
    # vorne ist eine Kachel
    robo_forward()

if robo_scan() is -1
    # vorne ist keine Kachel
    robo_left()
```


#!unlock type{primer} id{variables}
# Variablen

Zahlen können mit Hilfe von `var` in Variablen gespeichert werden, um sie später wiederzuverwenden.

```
# speichert den Rückgabewert in der Variable 'scan'
var scan = robo_scan()

# verwendet die gespeicherte Variable in Bedingungen
if scan is 1
    robo_forward()
if scan is -1
    robo_left()
```
Dadurch kann man vermeiden eine langsame Funktion mehrmals aufrufen zu müssen, um deren Rückgabewert an verschiedenen Stellen zu überprüfen. Außerdem kann man so gespeicherte Werte auch viel später noch wiederverwenden.

#!unlock type{primer} id{conditionals-2}
# Bedingungen II

'`if ausdruck`' überprüft eigentlich nur, ob `ausdruck` ungleich `0` ist. `0` wird als "falsch" interpretiert, während `1` und jeder andere Zahl ungleich `0` als "wahr" interpretiert wird. Wenn `ausdruck` als "wahr" interpretiert wird, dann werden die eingerückten Befehle ausgeführt.

```
if 0
    robo_left()  # wird nicht aufgerufen

if 1
    robo_forward()  # wird aufgerufen
```

#!unlock type{primer} id{is}
Das Schlüsselwort `is` vergleicht zwei Werte und ergibt `1` (wahr), wenn die Werte gleich sind. Andernfalls wird `0` (falsch) zurückgegeben. `is` wird typischerweise in `if`-Bedingungen verwendet.

Das Schlüsselwort `not` konvertiert `0` zu `1` und jede andere Zahl zu `0`.

`not x is y` ergibt `1`, wenn beide werte nicht gleich sind und kann auch als `x is not y` geschrieben werden.

```
var scan = robo_scan()

if scan is 1
    robo_forward()

if scan is not 1
    robo_left()
```


#!unlock type{primer} id{comparison}
# Vergleiche

Neben `is` können Werte auch mit den Operatoren `>`, `>=`, `<` und `<=` verglichen werden.

`    a > b  # a ist größer b`
`    a >= b  # a ist größer oder gleich b`
`    a < b  # a ist kleiner b`
`    a <= b  # a ist kleiner oder gleich b`

```
var scan = robo_scan()
if scan >= 1
    robo_forward()
if scan < 0
    robo_left()
```


#!unlock type{primer} id{conditionals-3}
# Bedingungen III

Nach einem `if` kann `else` benutzt werden, um den "Rest"-Fall zu behandeln.

Ein `else`-Block wird ausgeführt, wenn der `if`-Block darüber nicht ausgeführt wurde.

```
var scan = robo_scan()
if scan is 1
    robo_forward()
else
    robo_left()
```


#!unlock type{primer} id{else-if}

Mehrere `else if`-Blöcke können verkettet werden, um verschiedene Fälle zu behandeln, die sich gegenseitig ausschließen.

Dadurch wird sichergestellt, dass nur ein eingerückter Block ausgeführt wird.

```
var example = 14

if example is 1
    robo_left()
    robo_forward()
else if example <= 3
    robo_forward()
else if example > 12
    robo_forward()
    robo_forward()
else
    robo_left()
```
Einen `else`-Block am Ende wird nur ausgeführt, wenn alle `if` und `else if` Bedingungen darüber "falsch" ergaben.


#!unlock type{primer} id{scope}
# Gültigkeitsbereich

Eingerückte Code-Zeilen, wie die nach `loop`- oder `if`-Anweisungen, bilden einen eigenen "Gültigkeitsbereich". Eine Variable kann nur in dem Gültigkeitsbereich benutzt werden, in dem sie mit `var` deklariert wurde.
```no_run
if scan is 1
    var foo = 123
    if foo is 123  # kein Fehler
        robo_left()

if foo is 123  # Fehler! im äußeren Gültigkeitsbereich nicht verfügbar
    robo_left()
```
Um eine `var` besser verfügbar zu machen, kann man sie in einem äußeren Gültigkeitsbereich deklarieren. Variablen aus dem äußersten Gültigkeitsbereich, zum Beispiel, sind überall verfügbar und werden nicht gelöscht.
```no_run
var foo
if scan is 1
    foo = 123
    if foo is 123  # kein Fehler
        robo_left()

if foo is 123  # kein Fehler
    robo_left()
```
Variablen werden gelöscht sobald ihr Gültigkeitsbereich verlassen wird. Die Benutzung von `var` innerhalb einer `loop`-Schleife erstellt also eine neue Variable bei jedem Schleifen-Durchlauf.

#!unlock type{primer} id{loops-2}
# Schleifen II

Das Schlüsselwort `continue` kann benutzt werden, um direkt den nächsten Schleifen-Durchlauf zu starten. Mit `break` hingegen kann man die aktuelle `loop`-Schleife vollständig abbrechen.

```
var count = 0
loop
    if count is not 2
        robo_forward()
        count += 1
        continue
    break

robo_left()
robo_left()
```


#!unlock type{primer} id{loops-3}
# Schleifen III

Die folgende `loop`-Schleife führt 5 Links-Drehungen aus.
```
# turn left 5 times
var loop_count = 1
loop
    if loop_count > 5
        break
    robo_left()
    loop_count = loop_count + 1
```
Jegliche Schleifen-Logik kann zwar mit `loop` geschrieben werden, aber häufig lässt sich das selbe Ergebnis auch einfacher mit einer `for`- oder `while`-Schleife erreichen.
```
# wiederholt den Block so lange, bis die while-Bedingung "falsch" ergibt
var loop_count = 1
while loop_count <= 5
    robo_left()
    loop_count = loop_count + 1
```

```
# wiederholt den Block mit loop_count = 1, 2, 3, 4 & 5
for loop_count in 1,2,3,4,5
    robo_left()
```


#!unlock type{primer} id{fun}
# Funktionen

Die Befehle `robo_left()`, `robo_scan()` etc. sind Funktionen. Eine Funktion ist ein Code-Block, der später ausgeführt werden kann und wird mit dem Schlüsselwort `fun` definiert.

```
# definiert eine Funktion
fun go_right()
    robo_left()
    robo_left()

go_right()  # Funktions-Aufruf
go_right()
```


#!unlock type{primer} id{fun-b}
Funktionen sind nützlich um komplexeren Code, der oft wiederholt wird, einen Namen zu geben.

Funktionen können auch andere Funktionen aufrufen. Zum Beispiel könnten die Aufrufe von `robo_left()` gezählt werden, indem sie mit einer anderen Funktion umhüllt werden.

```
var left_count
fun left_and_count()
    robo_left()
    left_count += 1  # hochzählen

while left_count < 3
    left_and_count()
```


#!unlock type{primer} id{fun-2}
# Funktionen II

Funktionen können auch Zahlen entgegennehmen oder zurückgeben.

```
fun loneliest_number()
    1  # letzter Ausdruck wird zurückgegeben

# Funktion können Argumente entgegennehmen
fun largest(a, b)
    if b > a
        # direkte Rückgabe
        return b
    a

var three = largest(2, 3)
var one = largest(-5, loneliest_number())
```


#!unlock type{primer} id{bool}
# Boolesche Operatoren

Die Operatoren `and` & `or` können 0 mit Zahlen ungleich 0 kombinieren, um komplexere logische Ausdrücke zu formen.

Der '`and`' Operator ergibt `1` wenn beide Seiten ungleich 0 sind.

```
var scan = robo_scan()
var adjacent = robo_detect_adjacent()
if scan < 0 and adjacent is 3
    robo_forward()
```
Der '`or`' Operator ergibt `1` wenn mindestens eine der beiden Seiten ungleich 0 ist.
```
var scan = robo_scan()
var safe = scan is 1 or scan is 2
if safe
    robo_forward()
```


#!unlock type{primer} id{seq}
# Sequences

Mit `seq` wird eine Sequenz von Werten definiert. Die Werte der Sequenz können mit einem Index gelesen oder geändert werden, der bei 0 beginnt.

```
seq list[]  # neue, leere Sequenz
seq numbers[] = 11, 22, 33

var first = numbers[0]
var third = numbers[2]
numbers[1] = 77  # überschreibt Index 1 mit 77 (war 22)
if numbers[1] > 40
    robo_left()
```

#!unlock type{primer} id{seq-b}
Die Funktion `add(sv)` wird benutzt, um zusätzliche Werte an das Ende einer Sequenz anzufügen. `remove(sv)` löscht den Wert bei einem Index. `size(s)` gibt die Anzahl der Werte in einer Sequenz zurück.

```
seq list[]

var size = list[].size()
list[].add(11)  # fügt ans Ende an
list[].add(33)

var el = list[0]
var size = list[].size()

list[].remove(0)  # löscht Index 0
var el = list[0]
var size = list[].size()
```

#!unlock type{primer} id{loop-seq}
# Sequenzen iterieren

Mit `for` kann über jeden Wert in einer Sequenz iteriert werden.

```
seq nums[] = 1, 234, 55, -23

for number in nums[]
    if number < 100
        robo_use()
    else
        robo_left()
```


#!unlock type{primer} id{fun-3}
# Funktionen III

Funktionen können Sequenzen entgegennehmen.

```
# Funktion mit einem seq-Argument
fun sum(list[])
    var sum
    for n in list[]
        sum += n
    sum

seq nums[] = 1, 2, 3
var total = sum(nums[])

total is 6
```


#!unlock type{primer} id{dot-call}
Es gibt einen weiteren Weg um Funktionen mit Argumenten aufzurufen.

```no_run
fun example(a, b, c, d)
    # ...

example(2, 3, 4, 5)  # normaler Aufruf

2.example(3, 4, 5)  # Punkt-Aufruf
```
Der letztere Stil eignet sich besser in manchen Fällen, wie zum Beispiel bei den vordefinierten Funktionen `add`, `remove` & `size`.
```no_run
nums[].size() # 3 äquivalent zu size(nums[])

nums[].sum()  # 6
```
