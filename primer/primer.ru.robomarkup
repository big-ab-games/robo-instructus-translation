// Pseudo markup format see ./README.md

#!unlock type{primer} id{loops}
# Циклы

Цикл `loop` используется для повторения команд. Он бесконечно повторяет команды в своей области видимости. Область видимости цикла - это команды, идущие после строчки `loop` с дополнительным отступом.

```max_run=11
robo_forward()  # будет вызвано один раз

loop
    robo_forward()
    robo_left()

robo_left()  # никогда не будет вызвано
```


#!unlock type{primer} id{comments}
# Комментарии

Текст после символа '`#`' не будет воспринят как код. Комментарии нужны, чтобы оставлять в коде заметки.

```no_run
robo_left()  # Думаю, я начинаю понимать кое-что
```


#!unlock type{primer} id{conditionals}
# Условия

`if` используется для выполнения или невыполнения команд, в зависимости от условия.

```
if robo_scan() is 1
    # впереди есть ячейка
    robo_forward()

if robo_scan() is -1
    # впереди нет ячейки
    robo_left()
```


#!unlock type{primer} id{variables}
# Переменные

Вы можете сохранять числа для дальнейшего использования в переменных, объявленных с помощью `var`.

```
# запоминаем результат функции в переменной 'scan'
var scan = robo_scan()

# используем значение переменной в условиях
if scan is 1
    robo_forward()
if scan is -1
    robo_left()
```
Такой прием используется, чтобы избежать многократных вызовов медленных функций лишь для проверки одного и того же результата. Сохраненным результатом можно воспользоваться и позже.

#!unlock type{primer} id{conditionals-2}
# Условия II

'`if условие`' проверяет, не равно ли `условие` нулю. Так что `0` обозначает "ложь", в то время как `1` или другое ненулевое значение это "истина". Если `условие` представляет собой "истину", вложенные команды будут исполнены.

```
if 0
    robo_left()  # не будет вызвано

if 1
    robo_forward()  # будет вызвано
```

#!unlock type{primer} id{is}
Ключевое слово `is` сравнивает два значения и возвращает `1` (истину), когда значения совпадают, или `0` (ложь) в противном случае. Естественно, это используется вместе с `if`.

`not` используется, чтобы заменить `0` на `1`, или любое ненулевое значение на `0`.

`not x is y` также можно записать как `x is not y`, возвращает `1` (истину), когда значения различаются.

```
var scan = robo_scan()

if scan is 1
    robo_forward()

if scan is not 1
    robo_left()
```


#!unlock type{primer} id{comparison}
# Сравнения

В дополнение к `is`, значения можно сравнивать с помощью операторов `>`, `>=`, `<`, `<=`.

`    a > b  # a больше чем b`
`    a >= b  # a больше или равно b`
`    a < b  # a меньше чем b`
`    a <= b  # меньше или равно b`

```
var scan = robo_scan()
if scan >= 1
    robo_forward()
if scan < 0
    robo_left()
```


#!unlock type{primer} id{conditionals-3}
# Условия III

После `if` вы можете использовать `else`, чтобы обработать "иные" варианты было проще.

Блок `else` выполняется, если `if` выше не подходит.

```
var scan = robo_scan()
if scan is 1
    robo_forward()
else
    robo_left()
```


#!unlock type{primer} id{else-if}

Несколько блоков `else if` могут следовать друг за другом, чтобы обработать разные возможные случаи.

При этом будет гарантированно выполнен только один блок.

```
var example = 14

if example is 1
    robo_left()
    robo_forward()
else if example <= 3
    robo_forward()
else if example > 12
    robo_forward()
    robo_forward()
else
    robo_left()
```
Секция `else` в самом конце будет выполнена только если все проверки `if` и `else if` выше не будут успешны.


#!unlock type{primer} id{scope}
# Области видимости

Отступы в коде, как например после линий `loop` или `if`, обозначают "области видимости". Переменная `var` может использоваться только в той области видимости, в которой была объявлена.
```no_run
if scan is 1
    var foo = 123
    if foo is 123  # работает
        robo_left()

if foo is 123  # ошибка! переменная недоступна в этой области видимости
    robo_left()
```
Чтобы сделать переменную `var` доступной шире, ее следует объявить во внешней области видимости. Так например высокоуровневые переменные доступны везде и никогда не будут удалены.
```no_run
var foo
if scan is 1
    foo = 123
    if foo is 123  # работает
        robo_left()

if foo is 123  # работает
    robo_left()
```
Переменные удаляются при выходе из их области видимости, так что использование `var` в цикле `loop` приведёт к обновлению переменной при каждом повторе.


#!unlock type{primer} id{loops-2}
# Циклы II

Ключевое слово `continue` может использоваться для перезапуска повтора посреди цикла, в то время как `break` позволяет выйти из текущего цикла.

```
var count = 0
loop
    if count is not 2
        robo_forward()
        count += 1
        continue
    break

robo_left()
robo_left()
```


#!unlock type{primer} id{loops-3}
# Циклы III

Рассмотрим такой пример использования `loop`, в котором робот повернет налево пять раз.
```
# пять раз повернуть налево
var loop_count = 1
loop
    if loop_count > 5
        break
    robo_left()
    loop_count = loop_count + 1
```
В то время как любые варианты логики циклов могут быть реализованы с помощью `loop`, ключевые слова `for` и `while` помогут написать менее сложный код, приводящий к тому же результату.
```
# выполняет блок пока условие ложно
var loop_count = 1
while loop_count <= 5
    robo_left()
    loop_count = loop_count + 1
```

```
# выполняет блок, подставляя в loop_count значения 1, 2, 3, 4 и 5
for loop_count in 1,2,3,4,5
    robo_left()
```


#!unlock type{primer} id{fun}
# Функции

`robo_left()`, `robo_scan()` и прочие команды это функции. Но функции могут представлять собой и блоки кода, который можно выполнить позже. Они определяются с помощью ключевого слова `fun`.

```
# определяем функцию
fun go_right()
    robo_left()
    robo_left()

go_right()  # вызываем ее
go_right()
```


#!unlock type{primer} id{fun-b}.
Функции полезны для уменьшения повторений в коде и именования более сложных операций.

Функции могут быть вызваны и другими функциями. Например, вы можете сохранить число вызовов `robo_left()`, если встроите вызов в другую функцию и будете использовать последнюю.

```
var left_count
fun left_and_count()
    robo_left()
    left_count += 1  # увеличиваем счетчик

while left_count < 3
    left_and_count()
```


#!unlock type{primer} id{fun-2}
# Функции II

Функции также могут включать в себя числа и/или возвращать их.

```
fun loneliest_number()
    1  # единственное, что будет возвращено

# у функций могут быть параметры
fun largest(a, b)
    if b > a
        # можно вернуть и раньше
        return b
    a

var three = largest(2, 3)
var one = largest(-5, loneliest_number())
```


#!unlock type{primer} id{bool}
# Логические операторы

Операторы `and` и `or` могут использоваться для сочетания нулевых и ненулевых значений. Они позволяют создавать более сложные логические условия.

Выражение '`and`' возвращает `1`, если у условий с обеих сторон ненулевые значения.

```
var scan = robo_scan()
var adjacent = robo_detect_adjacent()
if scan < 0 and adjacent is 3
    robo_forward()
```
Выражение '`or`' возвращает `1`, если у одной из сторон ненулевое значение.
```
var scan = robo_scan()
var safe = scan is 1 or scan is 2
if safe
    robo_forward()
```


#!unlock type{primer} id{seq}
# Последовательности

`seq` используется для описания последовательности. Элементы последовательности могут быть доступны и модифицированы по их индексу, начинающемуся с `0`.

```
seq list[]  # новая пустая последовательность
seq numbers[] = 11, 22, 33

var first = numbers[0]
var third = numbers[2]
numbers[1] = 77  # заменить элемент с индексом 1 на 77 (было 22)
if numbers[1] > 40
    robo_left()
```

#!unlock type{primer} id{seq-b}
Функция `add(sv)` используется для добавления элементов в конец последовательности. `remove(sv)` для удаления элемента по его индексу. `size(s)` возвращает число элементов в последовательности.

```
seq list[]

var size = list[].size()
list[].add(11)  # добавить в конец
list[].add(33)

var el = list[0]
var size = list[].size()

list[].remove(0)  # удалить элемент с индексом 0
var el = list[0]
var size = list[].size()
```

#!unlock type{primer} id{loop-seq}
# Последовательности в циклах

Цикл `for` может использоваться для прокрутки всех элементов в последовательности.

```
seq nums[] = 1, 234, 55, -23

for number in nums[]
    if number < 100
        robo_use()
    else
        robo_left()
```


#!unlock type{primer} id{fun-3}
# Функции III

Функции могут включать в себя `seq` в качестве параметра.

```
# функция с одним параметром-последовательностью
fun sum(list[])
    var sum
    for n in list[]
        sum += n
    sum

seq nums[] = 1, 2, 3
var total = sum(nums[])

total is 6
```


#!unlock type{primer} id{dot-call}
Есть ещё один способ вызова функций с параметрами.

```no_run
fun example(a, b, c, d)
    # ...

example(2, 3, 4, 5)  # обычный синтаксис вызова

2.example(3, 4, 5)  # синтаксис вызова через точку
```
Второй способ может пригодиться в некоторых случаях, например, для встроенных функций `add`, `remove` и `size`.
```no_run
nums[].size() # 3, эквивалентно записи size(nums[])

nums[].sum()  # 6
```
